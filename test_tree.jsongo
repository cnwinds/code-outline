{
  "projectName": "testdata",
  "projectGoal": "TODO: 请在此描述项目目标和主要功能",
  "techStack": [
    "JavaScript",
    "Go",
    "Python"
  ],
  "lastUpdated": "2025-10-07T17:50:07.1286871+08:00",
  "architecture": {
    "overview": "TODO: 请在此描述项目的整体架构",
    "moduleSummary": {
      "root": "包含 3 个文件，主要用于 TODO: 请描述此模块的用途"
    }
  },
  "files": {
    "example.go": {
      "purpose": "TODO: Describe the purpose of this file.",
      "symbols": [
        {
          "prototype": "func NewGreeter(name string) *Greeter {\r\n\treturn \u0026Greeter{Name: name}\r\n}",
          "purpose": "",
          "range": [
            44,
            46
          ]
        },
        {
          "prototype": "func ProcessUserData(\r\n\tuserID int,\r\n\tuserName string,\r\n\temail string,\r\n\tage int,\r\n\tisActive bool,\r\n\tpreferences map[string]interface{},\r\n\tcallback func(string) error,\r\n) (string, error) {\r\n\t// 验证用户数据\r\n\tif userID \u003c= 0 {\r\n\t\treturn \"\", fmt.Errorf(\"invalid user ID: %d\", userID)\r\n\t}\r\n\r\n\tif userName == \"\" {\r\n\t\treturn \"\", fmt.Errorf(\"user name cannot be empty\")\r\n\t}\r\n\r\n\t// 处理用户数据\r\n\tresult := fmt.Sprintf(\"Processing user: %s (ID: %d, Email: %s, Age: %d, Active: %t)\",\r\n\t\tuserName, userID, email, age, isActive)\r\n\r\n\t// 执行回调函数\r\n\tif callback != nil {\r\n\t\tif err := callback(result); err != nil {\r\n\t\t\treturn \"\", fmt.Errorf(\"callback error: %w\", err)\r\n\t\t}\r\n\t}\r\n\r\n\treturn result, nil\r\n}",
          "purpose": "",
          "range": [
            54,
            84
          ]
        },
        {
          "prototype": "func CreateComplexStruct(\r\n\tconfig Config,\r\n\toptions Options,\r\n\thandlers []Handler,\r\n\ttimeout int,\r\n\tretries int,\r\n\tdebug bool,\r\n) (*ComplexStruct, error) {\r\n\t// 验证参数\r\n\tif timeout \u003c 0 {\r\n\t\treturn nil, fmt.Errorf(\"timeout must be non-negative\")\r\n\t}\r\n\r\n\tif retries \u003c 0 {\r\n\t\treturn nil, fmt.Errorf(\"retries must be non-negative\")\r\n\t}\r\n\r\n\t// 创建复杂结构体\r\n\tcs := \u0026ComplexStruct{\r\n\t\tConfig:    config,\r\n\t\tOptions:   options,\r\n\t\tHandlers:  handlers,\r\n\t\tTimeout:   timeout,\r\n\t\tRetries:   retries,\r\n\t\tDebug:     debug,\r\n\t\tCreatedAt: time.Now(),\r\n\t}\r\n\r\n\treturn cs, nil\r\n}",
          "purpose": "",
          "range": [
            87,
            116
          ]
        },
        {
          "prototype": "func main() {\r\n\tgreeter := NewGreeter(\"CodeCartographer\")\r\n\tmessage := greeter.SayHello(\"World\")\r\n\tfmt.Println(message)\r\n\r\n\t// 演示多行参数函数的使用\r\n\tpreferences := map[string]interface{}{\r\n\t\t\"theme\": \"dark\",\r\n\t\t\"lang\":  \"zh-CN\",\r\n\t}\r\n\r\n\t// 调用ProcessUserData函数\r\n\tresult, err := ProcessUserData(\r\n\t\t123,\r\n\t\t\"张三\",\r\n\t\t\"zhangsan@example.com\",\r\n\t\t25,\r\n\t\ttrue,\r\n\t\tpreferences,\r\n\t\tfunc(msg string) error {\r\n\t\t\tfmt.Println(\"回调函数执行:\", msg)\r\n\t\t\treturn nil\r\n\t\t},\r\n\t)\r\n\r\n\tif err != nil {\r\n\t\tfmt.Printf(\"处理用户数据时出错: %v\\n\", err)\r\n\t} else {\r\n\t\tfmt.Println(\"处理结果:\", result)\r\n\t}\r\n\r\n\t// 演示CreateComplexStruct函数\r\n\tconfig := Config{\r\n\t\tDatabaseURL: \"postgres://localhost:5432/mydb\",\r\n\t\tAPIVersion:  \"v1\",\r\n\t\tEnvironment: \"development\",\r\n\t}\r\n\r\n\toptions := Options{\r\n\t\tEnableLogging:  true,\r\n\t\tMaxConnections: 100,\r\n\t\tCacheSize:      1024,\r\n\t}\r\n\r\n\tcs, err := CreateComplexStruct(\r\n\t\tconfig,\r\n\t\toptions,\r\n\t\tnil,  // handlers\r\n\t\t30,   // timeout\r\n\t\t3,    // retries\r\n\t\ttrue, // debug\r\n\t)\r\n\r\n\tif err != nil {\r\n\t\tfmt.Printf(\"创建复杂结构体时出错: %v\\n\", err)\r\n\t} else {\r\n\t\tfmt.Printf(\"创建成功: %+v\\n\", cs)\r\n\t}\r\n}",
          "purpose": "",
          "range": [
            119,
            177
          ]
        },
        {
          "prototype": "func (g *Greeter) SayHello(person string) string {\r\n\treturn fmt.Sprintf(\"Hello %s, I'm %s!\", person, g.Name)\r\n}",
          "purpose": "",
          "range": [
            49,
            51
          ]
        },
        {
          "prototype": "type Greeter struct {\r\n\tName string\r\n}",
          "purpose": "",
          "range": [
            9,
            11
          ]
        },
        {
          "prototype": "type Config struct {\r\n\tDatabaseURL string\r\n\tAPIVersion  string\r\n\tEnvironment string\r\n}",
          "purpose": "",
          "range": [
            14,
            18
          ]
        },
        {
          "prototype": "type Options struct {\r\n\tEnableLogging  bool\r\n\tMaxConnections int\r\n\tCacheSize      int\r\n}",
          "purpose": "",
          "range": [
            21,
            25
          ]
        },
        {
          "prototype": "type Handler interface {\r\n\tProcess(data interface{}) error\r\n}",
          "purpose": "",
          "range": [
            28,
            30
          ]
        },
        {
          "prototype": "type ComplexStruct struct {\r\n\tConfig    Config\r\n\tOptions   Options\r\n\tHandlers  []Handler\r\n\tTimeout   int\r\n\tRetries   int\r\n\tDebug     bool\r\n\tCreatedAt time.Time\r\n}",
          "purpose": "",
          "range": [
            33,
            41
          ]
        }
      ],
      "lastModified": "2025-10-07T17:49:56+08:00",
      "fileSize": 3570
    },
    "example.js": {
      "purpose": "用户管理模块",
      "symbols": [
        {
          "prototype": "user =\u003e user.id === id",
          "purpose": "",
          "range": [
            20,
            20
          ]
        },
        {
          "prototype": "(id, name, email) =\u003e {\r\n    return new User(id, name, email);\r\n}",
          "purpose": "",
          "range": [
            39,
            41
          ]
        },
        {
          "prototype": "class UserManager {\r\n    constructor() {\r\n        this.users = [];\r\n    }\r\n\r\n    // 添加用户\r\n    addUser(user) {\r\n        this.users.push(user);\r\n        return this.users.length;\r\n    }\r\n\r\n    // 获取所有用户\r\n    getUsers() {\r\n        return [...this.users];\r\n    }\r\n\r\n    // 根据ID查找用户\r\n    findUserById(id) {\r\n        return this.users.find(user =\u003e user.id === id);\r\n    }\r\n}",
          "purpose": "",
          "range": [
            2,
            22
          ]
        },
        {
          "prototype": "class User {\r\n    constructor(id, name, email) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.email = email;\r\n    }\r\n\r\n    // 获取用户信息\r\n    getInfo() {\r\n        return `${this.name} (${this.email})`;\r\n    }\r\n}",
          "purpose": "",
          "range": [
            25,
            36
          ]
        }
      ],
      "lastModified": "2025-10-07T16:36:17+08:00",
      "fileSize": 858
    },
    "example.py": {
      "purpose": "TODO: Describe the purpose of this file.",
      "symbols": [
        {
          "prototype": "def __init__(self):\r\n        \"\"\"初始化用户管理器\"\"\"\r\n        self.users = []",
          "purpose": "",
          "range": [
            10,
            12
          ]
        },
        {
          "prototype": "def add_user(self, user):\r\n        \"\"\"添加用户到管理器\r\n        \r\n        Args:\r\n            user: User 实例\r\n            \r\n        Returns:\r\n            int: 用户总数\r\n        \"\"\"\r\n        self.users.append(user)\r\n        return len(self.users)",
          "purpose": "",
          "range": [
            14,
            24
          ]
        },
        {
          "prototype": "def get_users(self):\r\n        \"\"\"获取所有用户\r\n        \r\n        Returns:\r\n            list: 用户列表\r\n        \"\"\"\r\n        return self.users.copy()",
          "purpose": "",
          "range": [
            26,
            32
          ]
        },
        {
          "prototype": "def find_user_by_id(self, user_id):\r\n        \"\"\"根据ID查找用户\r\n        \r\n        Args:\r\n            user_id: 用户ID\r\n            \r\n        Returns:\r\n            User or None: 找到的用户或None\r\n        \"\"\"\r\n        for user in self.users:\r\n            if user.id == user_id:\r\n                return user\r\n        return None",
          "purpose": "",
          "range": [
            34,
            46
          ]
        },
        {
          "prototype": "def __init__(self, user_id, name, email):\r\n        \"\"\"初始化用户\r\n        \r\n        Args:\r\n            user_id: 用户ID\r\n            name: 用户名\r\n            email: 邮箱地址\r\n        \"\"\"\r\n        self.id = user_id\r\n        self.name = name\r\n        self.email = email",
          "purpose": "",
          "range": [
            51,
            61
          ]
        },
        {
          "prototype": "def get_info(self):\r\n        \"\"\"获取用户信息\r\n        \r\n        Returns:\r\n            str: 用户信息字符串\r\n        \"\"\"\r\n        return f\"{self.name} ({self.email})\"",
          "purpose": "",
          "range": [
            63,
            69
          ]
        },
        {
          "prototype": "def create_user(user_id, name, email):\r\n    \"\"\"创建用户实例\r\n    \r\n    Args:\r\n        user_id: 用户ID\r\n        name: 用户名\r\n        email: 邮箱地址\r\n        \r\n    Returns:\r\n        User: 用户实例\r\n    \"\"\"\r\n    return User(user_id, name, email)",
          "purpose": "",
          "range": [
            71,
            82
          ]
        },
        {
          "prototype": "class UserManager:\r\n    \"\"\"用户管理器类\"\"\"\r\n    \r\n    def __init__(self):\r\n        \"\"\"初始化用户管理器\"\"\"\r\n        self.users = []\r\n    \r\n    def add_user(self, user):\r\n        \"\"\"添加用户到管理器\r\n        \r\n        Args:\r\n            user: User 实例\r\n            \r\n        Returns:\r\n            int: 用户总数\r\n        \"\"\"\r\n        self.users.append(user)\r\n        return len(self.users)\r\n    \r\n    def get_users(self):\r\n        \"\"\"获取所有用户\r\n        \r\n        Returns:\r\n            list: 用户列表\r\n        \"\"\"\r\n        return self.users.copy()\r\n    \r\n    def find_user_by_id(self, user_id):\r\n        \"\"\"根据ID查找用户\r\n        \r\n        Args:\r\n            user_id: 用户ID\r\n            \r\n        Returns:\r\n            User or None: 找到的用户或None\r\n        \"\"\"\r\n        for user in self.users:\r\n            if user.id == user_id:\r\n                return user\r\n        return None",
          "purpose": "",
          "range": [
            7,
            46
          ]
        },
        {
          "prototype": "class User:\r\n    \"\"\"用户类\"\"\"\r\n    \r\n    def __init__(self, user_id, name, email):\r\n        \"\"\"初始化用户\r\n        \r\n        Args:\r\n            user_id: 用户ID\r\n            name: 用户名\r\n            email: 邮箱地址\r\n        \"\"\"\r\n        self.id = user_id\r\n        self.name = name\r\n        self.email = email\r\n    \r\n    def get_info(self):\r\n        \"\"\"获取用户信息\r\n        \r\n        Returns:\r\n            str: 用户信息字符串\r\n        \"\"\"\r\n        return f\"{self.name} ({self.email})\"",
          "purpose": "",
          "range": [
            48,
            69
          ]
        },
        {
          "prototype": "self.users = []",
          "purpose": "",
          "range": [
            12,
            12
          ]
        },
        {
          "prototype": "self.id = user_id",
          "purpose": "",
          "range": [
            59,
            59
          ]
        },
        {
          "prototype": "self.name = name",
          "purpose": "",
          "range": [
            60,
            60
          ]
        },
        {
          "prototype": "self.email = email",
          "purpose": "",
          "range": [
            61,
            61
          ]
        }
      ],
      "lastModified": "2025-10-07T16:36:17+08:00",
      "fileSize": 1823
    }
  }
}