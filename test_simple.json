{
  "projectName": "CodeCartographer",
  "projectGoal": "TODO: 请在此描述项目目标和主要功能",
  "techStack": [
    "Go",
    "JavaScript",
    "Python"
  ],
  "lastUpdated": "2025-10-07T17:07:56.705405+08:00",
  "architecture": {
    "overview": "TODO: 请在此描述项目的整体架构",
    "moduleSummary": {
      "cmd\\contextgen": "包含 1 个文件: main.go",
      "internal\\cmd": "包含 1 个文件: root.go",
      "internal\\config": "包含 2 个文件，主要用于 TODO: 请描述此模块的用途",
      "internal\\models": "包含 1 个文件: types.go",
      "internal\\parser": "包含 3 个文件，主要用于 TODO: 请描述此模块的用途",
      "internal\\parser\\testdata": "包含 3 个文件，主要用于 TODO: 请描述此模块的用途",
      "internal\\scanner": "包含 2 个文件，主要用于 TODO: 请描述此模块的用途",
      "internal\\updater": "包含 1 个文件: incremental.go"
    }
  },
  "files": {
    "cmd\\contextgen\\main.go": {
      "purpose": "TODO: Describe the purpose of this file.",
      "symbols": [
        {
          "prototype": "var Version = \"v0.1.0\"",
          "purpose": "Version 版本号",
          "range": [
            11,
            11
          ]
        },
        {
          "prototype": "func main() {",
          "purpose": "main 程序入口点，启动 CodeCartographer 命令行工具",
          "range": [
            14,
            14
          ]
        }
      ],
      "lastModified": "2025-10-07T16:36:19+08:00",
      "fileSize": 327
    },
    "internal\\cmd\\root.go": {
      "purpose": "TODO: Describe the purpose of this file.",
      "symbols": [
        {
          "prototype": "var rootCmd = \u0026cobra.Command{",
          "purpose": "rootCmd 根命令",
          "range": [
            29,
            29
          ]
        },
        {
          "prototype": "var generateCmd = \u0026cobra.Command{",
          "purpose": "generateCmd 生成命令",
          "range": [
            40,
            40
          ]
        },
        {
          "prototype": "var updateCmd = \u0026cobra.Command{",
          "purpose": "updateCmd 更新命令",
          "range": [
            48,
            48
          ]
        },
        {
          "prototype": "func init() {",
          "purpose": "",
          "range": [
            55,
            55
          ]
        },
        {
          "prototype": "func Execute(version string) error {",
          "purpose": "Execute 执行根命令",
          "range": [
            76,
            76
          ]
        },
        {
          "prototype": "func runGenerate(cmd *cobra.Command, args []string) error {",
          "purpose": "runGenerate 执行生成命令",
          "range": [
            93,
            93
          ]
        },
        {
          "prototype": "var codeParser scanner.FileParser",
          "purpose": "",
          "range": [
            106,
            106
          ]
        },
        {
          "prototype": "var excludePatterns []string",
          "purpose": "3. 解析排除模式",
          "range": [
            122,
            122
          ]
        },
        {
          "prototype": "func generateModuleSummary(files map[string]models.FileInfo) map[string]string {",
          "purpose": "generateModuleSummary 生成模块摘要",
          "range": [
            177,
            177
          ]
        },
        {
          "prototype": "func saveProjectContext(context *models.ProjectContext, outputPath string) error {",
          "purpose": "saveProjectContext 保存项目上下文到JSON文件",
          "range": [
            203,
            203
          ]
        },
        {
          "prototype": "func runUpdate(cmd *cobra.Command, args []string) error {",
          "purpose": "runUpdate 执行更新命令",
          "range": [
            220,
            220
          ]
        },
        {
          "prototype": "var fileParser scanner.FileParser",
          "purpose": "2. 创建解析器",
          "range": [
            230,
            230
          ]
        },
        {
          "prototype": "var excludePatterns []string",
          "purpose": "4. 解析排除模式",
          "range": [
            249,
            249
          ]
        },
        {
          "prototype": "func printStatistics(context *models.ProjectContext) {",
          "purpose": "printStatistics 打印统计信息",
          "range": [
            281,
            281
          ]
        },
        {
          "prototype": "func printUpdateStatistics(context *models.ProjectContext, changes []updater.FileChange) {",
          "purpose": "printUpdateStatistics 打印更新统计信息",
          "range": [
            299,
            299
          ]
        }
      ],
      "lastModified": "2025-10-07T16:36:19+08:00",
      "fileSize": 10418
    },
    "internal\\config\\config.go": {
      "purpose": "TODO: Describe the purpose of this file.",
      "symbols": [
        {
          "prototype": "type Config struct {",
          "purpose": "Config 表示应用程序配置",
          "range": [
            13,
            18
          ],
          "body": "\n\tLanguages   models.LanguagesConfig\n\tOutput      string\n\tExclude     []string\n\tProjectPath string"
        },
        {
          "prototype": "func LoadLanguagesConfig(configPath string) (models.LanguagesConfig, error) {",
          "purpose": "LoadLanguagesConfig 从指定路径加载语言配置文件",
          "range": [
            21,
            21
          ]
        },
        {
          "prototype": "var config models.LanguagesConfig",
          "purpose": "",
          "range": [
            39,
            39
          ]
        },
        {
          "prototype": "func createDefaultLanguagesConfig(configPath string) (models.LanguagesConfig, error) {",
          "purpose": "createDefaultLanguagesConfig 创建默认的语言配置文件",
          "range": [
            48,
            48
          ]
        },
        {
          "prototype": "func GetLanguageByExtension(config models.LanguagesConfig, ext string) (string, models.LanguageConfig, bool) {",
          "purpose": "GetLanguageByExtension 根据文件扩展名获取语言配置",
          "range": [
            113,
            113
          ]
        }
      ],
      "lastModified": "2025-10-07T16:36:19+08:00",
      "fileSize": 3434
    },
    "internal\\config\\config_test.go": {
      "purpose": "TODO: Describe the purpose of this file.",
      "symbols": [
        {
          "prototype": "func TestLoadLanguagesConfig(t *testing.T) {",
          "purpose": "",
          "range": [
            13,
            13
          ]
        },
        {
          "prototype": "func TestLoadLanguagesConfigFileNotExist(t *testing.T) {",
          "purpose": "",
          "range": [
            39,
            39
          ]
        },
        {
          "prototype": "func TestLoadLanguagesConfigInvalidJSON(t *testing.T) {",
          "purpose": "",
          "range": [
            54,
            54
          ]
        },
        {
          "prototype": "func TestGetLanguageByExtension(t *testing.T) {",
          "purpose": "",
          "range": [
            69,
            69
          ]
        },
        {
          "prototype": "func TestCreateDefaultLanguagesConfig(t *testing.T) {",
          "purpose": "",
          "range": [
            96,
            96
          ]
        },
        {
          "prototype": "func TestCreateDefaultLanguagesConfigDirectoryCreation(t *testing.T) {",
          "purpose": "",
          "range": [
            120,
            120
          ]
        },
        {
          "prototype": "func TestConfigStruct(t *testing.T) {",
          "purpose": "",
          "range": [
            139,
            139
          ]
        }
      ],
      "lastModified": "2025-10-07T16:36:19+08:00",
      "fileSize": 4245
    },
    "internal\\models\\types.go": {
      "purpose": "Symbol 表示代码中的一个符号（如函数、结构体、常量等）",
      "symbols": [
        {
          "prototype": "type Symbol struct {",
          "purpose": "Symbol 表示代码中的一个符号（如函数、结构体、常量等）",
          "range": [
            6,
            12
          ],
          "body": "\n\tPrototype string   `json:\"prototype\"`         // 符号的完整声明行\n\tPurpose   string   `json:\"purpose\"`           // 从注释中提取的说明\n\tRange     []int    `json:\"range\"`             // [start_line, end_line]\n\tBody      string   `json:\"body,omitempty\"`    // 用于类/结构体/接口等容器类型的内部内容\n\tMethods   []Symbol `json:\"methods,omitempty\"` // 用于类/结构体的方法"
        },
        {
          "prototype": "type FileInfo struct {",
          "purpose": "FileInfo 表示一个文件的信息",
          "range": [
            15,
            20
          ],
          "body": "\n\tPurpose      string   `json:\"purpose\"`      // 文件的用途描述\n\tSymbols      []Symbol `json:\"symbols\"`      // 文件中的符号列表\n\tLastModified string   `json:\"lastModified\"` // 文件最后修改时间\n\tFileSize     int64    `json:\"fileSize\"`     // 文件大小"
        },
        {
          "prototype": "type Architecture struct {",
          "purpose": "Architecture 表示项目架构信息",
          "range": [
            23,
            26
          ],
          "body": "\n\tOverview      string            `json:\"overview\"`      // 架构概述\n\tModuleSummary map[string]string `json:\"moduleSummary\"` // 模块摘要"
        },
        {
          "prototype": "type ProjectContext struct {",
          "purpose": "ProjectContext 表示整个项目的上下文信息",
          "range": [
            29,
            36
          ],
          "body": "\n\tProjectName  string              `json:\"projectName\"`  // 项目名称\n\tProjectGoal  string              `json:\"projectGoal\"`  // 项目目标\n\tTechStack    []string            `json:\"techStack\"`    // 技术栈\n\tLastUpdated  time.Time           `json:\"lastUpdated\"`  // 最后更新时间\n\tArchitecture Architecture        `json:\"architecture\"` // 架构信息\n\tFiles        map[string]FileInfo `json:\"files\"`        // 文件信息映射"
        },
        {
          "prototype": "type LanguageConfig struct {",
          "purpose": "LanguageConfig 表示单个语言的配置",
          "range": [
            39,
            42
          ],
          "body": "\n\tExtensions []string `json:\"extensions\"` // 文件扩展名列表\n\tQueries    Queries  `json:\"queries\"`    // 查询规则"
        },
        {
          "prototype": "type Queries struct {",
          "purpose": "Queries 表示Tree-sitter查询规则",
          "range": [
            45,
            49
          ],
          "body": "\n\tTopLevelSymbols  []string `json:\"top_level_symbols\"` // 顶级符号查询\n\tContainerBody    string   `json:\"container_body\"`    // 容器主体查询\n\tContainerMethods string   `json:\"container_methods\"` // 容器方法查询"
        },
        {
          "prototype": "type LanguagesConfig map[string]LanguageConfig",
          "purpose": "LanguagesConfig 表示所有语言的配置",
          "range": [
            52,
            52
          ]
        }
      ],
      "lastModified": "2025-09-21T21:31:11+08:00",
      "fileSize": 2222
    },
    "internal\\parser\\simple_parser.go": {
      "purpose": "TODO: Describe the purpose of this file.",
      "symbols": [
        {
          "prototype": "type SimpleParser struct {",
          "purpose": "用于在Tree-sitter语法文件不可用时提供基本功能",
          "range": [
            17,
            19
          ],
          "body": "\n\tlanguagesConfig models.LanguagesConfig"
        },
        {
          "prototype": "func NewSimpleParser(languagesConfig models.LanguagesConfig) *SimpleParser {",
          "purpose": "NewSimpleParser 创建新的简单解析器实例",
          "range": [
            22,
            22
          ]
        },
        {
          "prototype": "func (p *SimpleParser) ParseFile(filePath string) (*models.FileInfo, error) {",
          "purpose": "ParseFile 解析单个文件",
          "range": [
            29,
            29
          ]
        },
        {
          "prototype": "func (p *SimpleParser) parseSymbolsByLanguage(content, language string) ([]models.Symbol, error) {",
          "purpose": "parseSymbolsByLanguage 根据语言类型解析符号",
          "range": [
            66,
            66
          ]
        },
        {
          "prototype": "var symbols []models.Symbol",
          "purpose": "",
          "range": [
            67,
            67
          ]
        },
        {
          "prototype": "func (p *SimpleParser) parseGoSymbols(lines []string) []models.Symbol {",
          "purpose": "parseGoSymbols 解析Go语言符号",
          "range": [
            88,
            88
          ]
        },
        {
          "prototype": "var symbols []models.Symbol",
          "purpose": "",
          "range": [
            89,
            89
          ]
        },
        {
          "prototype": "func (p *SimpleParser) parseJSSymbols(lines []string) []models.Symbol {",
          "purpose": "parseJSSymbols 解析JavaScript/TypeScript符号",
          "range": [
            133,
            133
          ]
        },
        {
          "prototype": "var symbols []models.Symbol",
          "purpose": "",
          "range": [
            134,
            134
          ]
        },
        {
          "prototype": "func (p *SimpleParser) parsePythonSymbols(lines []string) []models.Symbol {",
          "purpose": "parsePythonSymbols 解析Python符号",
          "range": [
            169,
            169
          ]
        },
        {
          "prototype": "var symbols []models.Symbol",
          "purpose": "",
          "range": [
            170,
            170
          ]
        },
        {
          "prototype": "func (p *SimpleParser) parseJavaSymbols(lines []string) []models.Symbol {",
          "purpose": "parseJavaSymbols 解析Java符号",
          "range": [
            203,
            203
          ]
        },
        {
          "prototype": "var symbols []models.Symbol",
          "purpose": "",
          "range": [
            204,
            204
          ]
        },
        {
          "prototype": "func (p *SimpleParser) parseGenericSymbols(lines []string) []models.Symbol {",
          "purpose": "parseGenericSymbols 通用符号解析",
          "range": [
            238,
            238
          ]
        },
        {
          "prototype": "var symbols []models.Symbol",
          "purpose": "",
          "range": [
            239,
            239
          ]
        },
        {
          "prototype": "func (p *SimpleParser) extractPurpose(lines []string, currentLine int) string {",
          "purpose": "extractPurpose 提取符号的用途说明（从前面的注释）",
          "range": [
            270,
            270
          ]
        },
        {
          "prototype": "func (p *SimpleParser) extractGoTypeBody(lines []string, startLine int) (string, int) {",
          "purpose": "extractGoTypeBody 提取Go类型的主体内容",
          "range": [
            296,
            296
          ]
        },
        {
          "prototype": "var bodyLines []string",
          "purpose": "",
          "range": [
            297,
            297
          ]
        },
        {
          "prototype": "func (p *SimpleParser) extractFilePurpose(content, language string) string {",
          "purpose": "extractFilePurpose 提取文件的用途说明",
          "range": [
            337,
            337
          ]
        },
        {
          "prototype": "func min(a, b int) int {",
          "purpose": "min 返回两个整数中的较小者",
          "range": [
            369,
            369
          ]
        }
      ],
      "lastModified": "2025-10-07T16:36:19+08:00",
      "fileSize": 9614
    },
    "internal\\parser\\simple_parser_test.go": {
      "purpose": "TODO: Describe the purpose of this file.",
      "symbols": [
        {
          "prototype": "func TestNewSimpleParser(t *testing.T) {",
          "purpose": "",
          "range": [
            13,
            13
          ]
        },
        {
          "prototype": "func TestParseGoFile(t *testing.T) {",
          "purpose": "",
          "range": [
            25,
            25
          ]
        },
        {
          "prototype": "func TestParseGoSymbols(t *testing.T) {",
          "purpose": "",
          "range": [
            49,
            49
          ]
        },
        {
          "prototype": "func TestParseJSSymbols(t *testing.T) {",
          "purpose": "",
          "range": [
            68,
            68
          ]
        },
        {
          "prototype": "func TestParsePythonSymbols(t *testing.T) {",
          "purpose": "",
          "range": [
            85,
            85
          ]
        },
        {
          "prototype": "func TestExtractPurpose(t *testing.T) {",
          "purpose": "",
          "range": [
            100,
            100
          ]
        },
        {
          "prototype": "func TestExtractFilePurpose(t *testing.T) {",
          "purpose": "",
          "range": [
            145,
            145
          ]
        },
        {
          "prototype": "func main() {",
          "purpose": "",
          "range": [
            154,
            154
          ]
        },
        {
          "prototype": "func main() {",
          "purpose": "",
          "range": [
            166,
            166
          ]
        },
        {
          "prototype": "func TestParseFileWithUnsupportedExtension(t *testing.T) {",
          "purpose": "",
          "range": [
            174,
            174
          ]
        },
        {
          "prototype": "func TestParseFileNotFound(t *testing.T) {",
          "purpose": "",
          "range": [
            186,
            186
          ]
        },
        {
          "prototype": "func getTestConfig() models.LanguagesConfig {",
          "purpose": "辅助函数",
          "range": [
            196,
            196
          ]
        },
        {
          "prototype": "func createTempFile(t *testing.T, name, content string) string {",
          "purpose": "",
          "range": [
            210,
            210
          ]
        },
        {
          "prototype": "const goTestCode = `package main",
          "purpose": "",
          "range": [
            217,
            217
          ]
        },
        {
          "prototype": "func main() {",
          "purpose": "main 函数",
          "range": [
            220,
            220
          ]
        },
        {
          "prototype": "func helper() string {",
          "purpose": "helper 函数",
          "range": [
            225,
            225
          ]
        }
      ],
      "lastModified": "2025-10-07T16:36:19+08:00",
      "fileSize": 4852
    },
    "internal\\parser\\testdata\\example.go": {
      "purpose": "Greeter 是一个简单的问候器",
      "symbols": [
        {
          "prototype": "type Greeter struct {",
          "purpose": "Greeter 是一个简单的问候器",
          "range": [
            6,
            8
          ],
          "body": "\r\n\tName string\r"
        },
        {
          "prototype": "func NewGreeter(name string) *Greeter {",
          "purpose": "NewGreeter 创建一个新的问候器实例",
          "range": [
            11,
            11
          ]
        },
        {
          "prototype": "func (g *Greeter) SayHello(person string) string {",
          "purpose": "SayHello 向指定的人打招呼",
          "range": [
            16,
            16
          ]
        },
        {
          "prototype": "func main() {",
          "purpose": "main 程序入口点",
          "range": [
            21,
            21
          ]
        }
      ],
      "lastModified": "2025-10-07T16:36:19+08:00",
      "fileSize": 541
    },
    "internal\\parser\\testdata\\example.js": {
      "purpose": "用户管理模块",
      "symbols": [
        {
          "prototype": "class UserManager {",
          "purpose": "用户管理模块",
          "range": [
            2,
            2
          ]
        },
        {
          "prototype": "class User {",
          "purpose": "用户类",
          "range": [
            25,
            25
          ]
        },
        {
          "prototype": "const createUser = (id, name, email) =\u003e {",
          "purpose": "工具函数",
          "range": [
            39,
            39
          ]
        }
      ],
      "lastModified": "2025-10-07T16:36:17+08:00",
      "fileSize": 858
    },
    "internal\\parser\\testdata\\example.py": {
      "purpose": "TODO: Describe the purpose of this file.",
      "symbols": [
        {
          "prototype": "class UserManager:",
          "purpose": "",
          "range": [
            7,
            7
          ]
        },
        {
          "prototype": "def __init__(self):",
          "purpose": "",
          "range": [
            10,
            10
          ]
        },
        {
          "prototype": "def add_user(self, user):",
          "purpose": "",
          "range": [
            14,
            14
          ]
        },
        {
          "prototype": "def get_users(self):",
          "purpose": "",
          "range": [
            26,
            26
          ]
        },
        {
          "prototype": "def find_user_by_id(self, user_id):",
          "purpose": "",
          "range": [
            34,
            34
          ]
        },
        {
          "prototype": "class User:",
          "purpose": "",
          "range": [
            48,
            48
          ]
        },
        {
          "prototype": "def __init__(self, user_id, name, email):",
          "purpose": "",
          "range": [
            51,
            51
          ]
        },
        {
          "prototype": "def get_info(self):",
          "purpose": "",
          "range": [
            63,
            63
          ]
        },
        {
          "prototype": "def create_user(user_id, name, email):",
          "purpose": "",
          "range": [
            71,
            71
          ]
        }
      ],
      "lastModified": "2025-10-07T16:36:17+08:00",
      "fileSize": 1823
    },
    "internal\\parser\\treesitter_parser.go": {
      "purpose": "TODO: Describe the purpose of this file.",
      "symbols": [
        {
          "prototype": "type TreeSitterParser struct {",
          "purpose": "TreeSitterParser Tree-sitter 解析器",
          "range": [
            20,
            23
          ],
          "body": "\r\n\tlanguagesConfig models.LanguagesConfig\r\n\tparsers         map[string]*sitter.Parser\r"
        },
        {
          "prototype": "func NewTreeSitterParser(languagesConfig models.LanguagesConfig) (*TreeSitterParser, error) {",
          "purpose": "NewTreeSitterParser 创建新的 Tree-sitter 解析器",
          "range": [
            26,
            26
          ]
        },
        {
          "prototype": "func (p *TreeSitterParser) initParsers() error {",
          "purpose": "initParsers 初始化语言解析器",
          "range": [
            41,
            41
          ]
        },
        {
          "prototype": "func (p *TreeSitterParser) ParseFile(filePath string) (*models.FileInfo, error) {",
          "purpose": "ParseFile 解析单个文件",
          "range": [
            62,
            62
          ]
        },
        {
          "prototype": "func (p *TreeSitterParser) extractSymbols(node *sitter.Node, content []byte, lang string) []models.Symbol {",
          "purpose": "extractSymbols 从语法树提取符号",
          "range": [
            104,
            104
          ]
        },
        {
          "prototype": "var symbols []models.Symbol",
          "purpose": "",
          "range": [
            105,
            105
          ]
        },
        {
          "prototype": "var language *sitter.Language",
          "purpose": "获取语言对象",
          "range": [
            116,
            116
          ]
        },
        {
          "prototype": "func (p *TreeSitterParser) nodeToSymbol(node *sitter.Node, content []byte) models.Symbol {",
          "purpose": "nodeToSymbol 将语法树节点转换为符号",
          "range": [
            157,
            157
          ]
        },
        {
          "prototype": "func (p *TreeSitterParser) extractFilePurpose(content []byte) string {",
          "purpose": "extractFilePurpose 提取文件用途",
          "range": [
            169,
            169
          ]
        },
        {
          "prototype": "func minInt(a, b int) int {",
          "purpose": "minInt 返回两个整数中的较小者",
          "range": [
            201,
            201
          ]
        }
      ],
      "lastModified": "2025-10-07T17:04:12+08:00",
      "fileSize": 5090
    },
    "internal\\scanner\\scanner.go": {
      "purpose": "TODO: Describe the purpose of this file.",
      "symbols": [
        {
          "prototype": "type FileParser interface {",
          "purpose": "FileParser 文件解析器接口",
          "range": [
            14,
            16
          ],
          "body": "\r\n\tParseFile(filePath string) (*models.FileInfo, error)\r"
        },
        {
          "prototype": "type Scanner struct {",
          "purpose": "Scanner 文件扫描器",
          "range": [
            19,
            22
          ],
          "body": "\r\n\tparser          FileParser\r\n\texcludePatterns []string\r"
        },
        {
          "prototype": "func NewScanner(parser FileParser, excludePatterns []string) *Scanner {",
          "purpose": "NewScanner 创建新的扫描器实例",
          "range": [
            25,
            25
          ]
        },
        {
          "prototype": "func (s *Scanner) ScanProject(projectPath string) (map[string]models.FileInfo, []string, error) {",
          "purpose": "ScanProject 扫描整个项目",
          "range": [
            33,
            33
          ]
        },
        {
          "prototype": "var techStack []string",
          "purpose": "",
          "range": [
            35,
            35
          ]
        },
        {
          "prototype": "var mu sync.Mutex",
          "purpose": "",
          "range": [
            36,
            36
          ]
        },
        {
          "prototype": "var wg sync.WaitGroup",
          "purpose": "",
          "range": [
            37,
            37
          ]
        },
        {
          "prototype": "var scanErrors []error",
          "purpose": "",
          "range": [
            41,
            41
          ]
        },
        {
          "prototype": "func (s *Scanner) shouldExclude(path string) bool {",
          "purpose": "shouldExclude 检查路径是否应该被排除",
          "range": [
            133,
            133
          ]
        },
        {
          "prototype": "func (s *Scanner) getLanguageFromExtension(ext string) string {",
          "purpose": "getLanguageFromExtension 根据文件扩展名获取语言名称",
          "range": [
            168,
            168
          ]
        },
        {
          "prototype": "func contains(slice []string, item string) bool {",
          "purpose": "contains 检查字符串切片是否包含指定字符串",
          "range": [
            237,
            237
          ]
        }
      ],
      "lastModified": "2025-10-07T16:36:19+08:00",
      "fileSize": 5541
    },
    "internal\\scanner\\scanner_test.go": {
      "purpose": "TODO: Describe the purpose of this file.",
      "symbols": [
        {
          "prototype": "type mockParser struct{}",
          "purpose": "mockParser 用于测试的模拟解析器",
          "range": [
            14,
            14
          ]
        },
        {
          "prototype": "func (m *mockParser) ParseFile(filePath string) (*models.FileInfo, error) {",
          "purpose": "",
          "range": [
            16,
            16
          ]
        },
        {
          "prototype": "func TestNewScanner(t *testing.T) {",
          "purpose": "",
          "range": [
            32,
            32
          ]
        },
        {
          "prototype": "func TestScanProject(t *testing.T) {",
          "purpose": "",
          "range": [
            42,
            42
          ]
        },
        {
          "prototype": "func TestScanProjectWithExcludePatterns(t *testing.T) {",
          "purpose": "",
          "range": [
            73,
            73
          ]
        },
        {
          "prototype": "func TestShouldExclude(t *testing.T) {",
          "purpose": "",
          "range": [
            100,
            100
          ]
        },
        {
          "prototype": "func TestShouldExcludeWithCustomPatterns(t *testing.T) {",
          "purpose": "",
          "range": [
            125,
            125
          ]
        },
        {
          "prototype": "func TestGetLanguageFromExtension(t *testing.T) {",
          "purpose": "",
          "range": [
            148,
            148
          ]
        },
        {
          "prototype": "func TestContains(t *testing.T) {",
          "purpose": "",
          "range": [
            177,
            177
          ]
        },
        {
          "prototype": "func TestScanProjectEmptyDirectory(t *testing.T) {",
          "purpose": "",
          "range": [
            198,
            198
          ]
        },
        {
          "prototype": "func TestScanProjectWithErrors(t *testing.T) {",
          "purpose": "",
          "range": [
            212,
            212
          ]
        },
        {
          "prototype": "func createTestFile(t *testing.T, dir, name, content string) {",
          "purpose": "辅助函数",
          "range": [
            236,
            236
          ]
        },
        {
          "prototype": "type failingParser struct{}",
          "purpose": "failingParser 总是返回错误的解析器",
          "range": [
            243,
            243
          ]
        },
        {
          "prototype": "func (f *failingParser) ParseFile(filePath string) (*models.FileInfo, error) {",
          "purpose": "",
          "range": [
            245,
            245
          ]
        },
        {
          "prototype": "const goTestCode = `package main",
          "purpose": "",
          "range": [
            249,
            249
          ]
        },
        {
          "prototype": "func main() {",
          "purpose": "",
          "range": [
            251,
            251
          ]
        },
        {
          "prototype": "const jsTestCode = `function test() {",
          "purpose": "",
          "range": [
            256,
            256
          ]
        }
      ],
      "lastModified": "2025-10-07T16:36:19+08:00",
      "fileSize": 6120
    },
    "internal\\updater\\incremental.go": {
      "purpose": "TODO: Describe the purpose of this file.",
      "symbols": [
        {
          "prototype": "type IncrementalUpdater struct {",
          "purpose": "IncrementalUpdater 增量更新器",
          "range": [
            16,
            18
          ],
          "body": "\n\tparser scanner.FileParser"
        },
        {
          "prototype": "func NewIncrementalUpdater(p scanner.FileParser) *IncrementalUpdater {",
          "purpose": "NewIncrementalUpdater 创建新的增量更新器",
          "range": [
            21,
            21
          ]
        },
        {
          "prototype": "type FileChangeType int",
          "purpose": "FileChangeType 文件变更类型",
          "range": [
            28,
            28
          ]
        },
        {
          "prototype": "type FileChange struct {",
          "purpose": "FileChange 文件变更信息",
          "range": [
            37,
            42
          ],
          "body": "\n\tPath       string\n\tChangeType FileChangeType\n\tOldInfo    *models.FileInfo\n\tNewInfo    *models.FileInfo"
        },
        {
          "prototype": "func (u *IncrementalUpdater) UpdateProject(contextPath, projectPath string, excludePatterns []string) (*models.ProjectContext, []FileChange, error) {",
          "purpose": "UpdateProject 增量更新项目上下文",
          "range": [
            45,
            45
          ]
        },
        {
          "prototype": "func (u *IncrementalUpdater) loadExistingContext(contextPath string) (*models.ProjectContext, error) {",
          "purpose": "loadExistingContext 加载现有的项目上下文",
          "range": [
            77,
            77
          ]
        },
        {
          "prototype": "var context models.ProjectContext",
          "purpose": "",
          "range": [
            87,
            87
          ]
        },
        {
          "prototype": "func (u *IncrementalUpdater) detectFileChanges(context *models.ProjectContext, projectPath string, excludePatterns []string) ([]FileChange, error) {",
          "purpose": "detectFileChanges 检测文件变更",
          "range": [
            96,
            96
          ]
        },
        {
          "prototype": "var changes []FileChange",
          "purpose": "",
          "range": [
            97,
            97
          ]
        },
        {
          "prototype": "func (u *IncrementalUpdater) isFileModified(filePath string, existingInfo *models.FileInfo) bool {",
          "purpose": "isFileModified 检查文件是否被修改",
          "range": [
            183,
            183
          ]
        },
        {
          "prototype": "func (u *IncrementalUpdater) applyChanges(context *models.ProjectContext, changes []FileChange) (*models.ProjectContext, error) {",
          "purpose": "applyChanges 应用文件变更",
          "range": [
            197,
            197
          ]
        },
        {
          "prototype": "func (u *IncrementalUpdater) generateModuleSummary(files map[string]models.FileInfo) map[string]string {",
          "purpose": "generateModuleSummary 生成模块摘要",
          "range": [
            231,
            231
          ]
        },
        {
          "prototype": "func (u *IncrementalUpdater) shouldExclude(path string, excludePatterns []string) bool {",
          "purpose": "shouldExclude 检查路径是否应该被排除",
          "range": [
            257,
            257
          ]
        },
        {
          "prototype": "func (u *IncrementalUpdater) isSupportedFile(ext string) bool {",
          "purpose": "isSupportedFile 检查是否为支持的文件类型",
          "range": [
            271,
            271
          ]
        }
      ],
      "lastModified": "2025-10-07T16:36:19+08:00",
      "fileSize": 7294
    }
  }
}