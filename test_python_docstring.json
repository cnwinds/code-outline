{
  "projectName": "testdata",
  "projectGoal": "TODO: 请在此描述项目目标和主要功能",
  "techStack": [
    "JavaScript",
    "Go",
    "Python"
  ],
  "lastUpdated": "2025-10-07T18:52:11.2628456+08:00",
  "architecture": {
    "overview": "TODO: 请在此描述项目的整体架构",
    "moduleSummary": {
      "root": "包含 3 个文件，主要用于 TODO: 请描述此模块的用途"
    }
  },
  "files": {
    "example.go": {
      "purpose": "TODO: Describe the purpose of this file.",
      "symbols": [
        {
          "prototype": "func NewGreeter(name string) *Greeter",
          "purpose": "NewGreeter 创建一个新的问候器实例",
          "range": [
            44,
            46
          ]
        },
        {
          "prototype": "func ProcessUserData(\r\n\tuserID int,\r\n\tuserName string,\r\n\temail string,\r\n\tage int,\r\n\tisActive bool,\r\n\tpreferences map[string]interface{},\r\n\tcallback func(string) error,\r\n) (string, error)",
          "purpose": "ProcessUserData 处理用户数据，包含多个参数",
          "range": [
            54,
            84
          ]
        },
        {
          "prototype": "func CreateComplexStruct(\r\n\tconfig Config,\r\n\toptions Options,\r\n\thandlers []Handler,\r\n\ttimeout int,\r\n\tretries int,\r\n\tdebug bool,\r\n) (*ComplexStruct, error)",
          "purpose": "CreateComplexStruct 创建一个复杂的结构体，包含多行参数",
          "range": [
            87,
            116
          ]
        },
        {
          "prototype": "func main()",
          "purpose": "main 程序入口点",
          "range": [
            119,
            177
          ]
        },
        {
          "prototype": "func (g *Greeter) SayHello(person string) string",
          "purpose": "SayHello 向指定的人打招呼",
          "range": [
            49,
            51
          ]
        },
        {
          "prototype": "type Greeter struct {\r\n\tName string\r\n}",
          "purpose": "Greeter 是一个简单的问候器",
          "range": [
            9,
            11
          ]
        },
        {
          "prototype": "type Config struct {\r\n\tDatabaseURL string\r\n\tAPIVersion  string\r\n\tEnvironment string\r\n}",
          "purpose": "Config 配置结构体",
          "range": [
            14,
            18
          ]
        },
        {
          "prototype": "type Options struct {\r\n\tEnableLogging  bool\r\n\tMaxConnections int\r\n\tCacheSize      int\r\n}",
          "purpose": "Options 选项结构体",
          "range": [
            21,
            25
          ]
        },
        {
          "prototype": "type Handler interface {\r\n\tProcess(data interface{}) error\r\n}",
          "purpose": "Handler 处理器接口",
          "range": [
            28,
            30
          ]
        },
        {
          "prototype": "type ComplexStruct struct {\r\n\tConfig    Config\r\n\tOptions   Options\r\n\tHandlers  []Handler\r\n\tTimeout   int\r\n\tRetries   int\r\n\tDebug     bool\r\n\tCreatedAt time.Time\r\n}",
          "purpose": "ComplexStruct 复杂结构体",
          "range": [
            33,
            41
          ]
        }
      ],
      "lastModified": "2025-10-07T17:49:56+08:00",
      "fileSize": 3570
    },
    "example.js": {
      "purpose": "用户管理模块",
      "symbols": [
        {
          "prototype": "createUser = (id, name, email) =\u003e {\r\n    return new User(id, name, email);\r\n}",
          "purpose": "工具函数",
          "range": [
            39,
            41
          ]
        },
        {
          "prototype": "class UserManager",
          "purpose": "用户管理模块",
          "range": [
            2,
            22
          ],
          "methods": [
            {
              "prototype": "UserManager.constructor()",
              "purpose": "",
              "range": [
                3,
                5
              ]
            },
            {
              "prototype": "UserManager.addUser(user)",
              "purpose": "添加用户",
              "range": [
                8,
                11
              ]
            },
            {
              "prototype": "UserManager.getUsers()",
              "purpose": "获取所有用户",
              "range": [
                14,
                16
              ]
            },
            {
              "prototype": "UserManager.findUserById(id)",
              "purpose": "根据ID查找用户",
              "range": [
                19,
                21
              ]
            }
          ]
        },
        {
          "prototype": "class User",
          "purpose": "用户类",
          "range": [
            25,
            36
          ],
          "methods": [
            {
              "prototype": "User.constructor(id, name, email)",
              "purpose": "",
              "range": [
                26,
                30
              ]
            },
            {
              "prototype": "User.getInfo()",
              "purpose": "获取用户信息",
              "range": [
                33,
                35
              ]
            }
          ]
        }
      ],
      "lastModified": "2025-10-07T16:36:17+08:00",
      "fileSize": 858
    },
    "example.py": {
      "purpose": "TODO: Describe the purpose of this file.",
      "symbols": [
        {
          "prototype": "def create_user(user_id, name, email):",
          "purpose": "",
          "range": [
            71,
            82
          ]
        },
        {
          "prototype": "class UserManager:",
          "purpose": "",
          "range": [
            7,
            46
          ],
          "methods": [
            {
              "prototype": "def UserManager.__init__(self):",
              "purpose": "用户管理器类",
              "range": [
                10,
                12
              ]
            },
            {
              "prototype": "def UserManager.add_user(self, user):",
              "purpose": "",
              "range": [
                14,
                24
              ]
            },
            {
              "prototype": "def UserManager.get_users(self):",
              "purpose": "",
              "range": [
                26,
                32
              ]
            },
            {
              "prototype": "def UserManager.find_user_by_id(self, user_id):",
              "purpose": "",
              "range": [
                34,
                46
              ]
            }
          ]
        },
        {
          "prototype": "class User:",
          "purpose": "",
          "range": [
            48,
            69
          ],
          "methods": [
            {
              "prototype": "def User.__init__(self, user_id, name, email):",
              "purpose": "用户类",
              "range": [
                51,
                61
              ]
            },
            {
              "prototype": "def User.get_info(self):",
              "purpose": "",
              "range": [
                63,
                69
              ]
            }
          ]
        }
      ],
      "lastModified": "2025-10-07T16:36:17+08:00",
      "fileSize": 1823
    }
  }
}