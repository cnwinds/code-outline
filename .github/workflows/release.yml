name: Release

on:
  push:
    tags:
      - 'v*'

# 设置工作流权限
permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            binary-name: code-outline-windows-amd64.exe
            build-deps: choco install mingw -y
          - os: ubuntu-latest
            binary-name: code-outline-linux-amd64
            build-deps: sudo apt-get update && sudo apt-get install -y build-essential
          - os: macos-latest
            binary-name: code-outline-darwin-amd64
            build-deps: brew install gcc || true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Install build dependencies
      run: ${{ matrix.build-deps }}

    - name: Build
      run: |
        mkdir -p build
        go build -v -o build/${{ matrix.binary-name }} ./cmd/code-outline
      env:
        CGO_ENABLED: 1

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.binary-name }}
        path: build/${{ matrix.binary-name }}

  create-release:
    name: Create Release
    needs: build-and-release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get tag message
      id: tag_message
      run: |
        # 获取 tag 的提交信息作为 release 内容
        TAG_NAME=${GITHUB_REF#refs/tags/}
        TAG_MESSAGE=$(git tag -l --format='%(contents)' $TAG_NAME)
        if [ -z "$TAG_MESSAGE" ]; then
          # 如果没有 tag 消息，使用最近的提交信息
          TAG_MESSAGE=$(git log -1 --pretty=%B)
        fi
        echo "message<<EOF" >> $GITHUB_OUTPUT
        echo "$TAG_MESSAGE" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          ${{ steps.tag_message.outputs.message }}
          
          ## 📦 下载
          
          ### Windows
          - [code-outline-windows-amd64.exe](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/code-outline-windows-amd64.exe)
          
          ### Linux
          - [code-outline-linux-amd64](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/code-outline-linux-amd64)
          
          ### macOS
          - [code-outline-darwin-amd64](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/code-outline-darwin-amd64)
          
          ## 🚀 使用说明
          
          1. 下载适合您系统的版本
          2. 解压到任意目录
          3. 将可执行文件添加到 PATH 环境变量
          4. 运行 `code-outline --help` 查看使用说明
        files: |
          artifacts/code-outline-windows-amd64.exe/code-outline-windows-amd64.exe
          artifacts/code-outline-linux-amd64/code-outline-linux-amd64
          artifacts/code-outline-darwin-amd64/code-outline-darwin-amd64
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
